#!/usr/bin/env node

require('./global')
const rubico = require('./rubico')
const rubicoX = require('./x')
const Transducer = require('./Transducer')
const rubicoVersion = require('./package.json').version
const fs = require('fs')
const nodePath = require('path')
const { minify } = require('terser')

const {
  identity,
  noop,
  trace,
  last,
  isEmpty,
  find,
  forEach,
  flatten,
  isObject,
} = rubicoX

const Stdout = {
  concat(...args) {
    console.log(...args)
    return this
  },
}

const split = delimiter => value => value.split(delimiter)

const slice = (from, to) => value => value.slice(from, to < 0 ? value.length + to : to)

const toString = value => value.toString()

const replace = (pattern, replacement) => value => value.replace(pattern, replacement)

const startsWith = pattern => value => value.startsWith(pattern)

const endsWith = pattern => value => value.endsWith(pattern)

const has = item => value => value.has(item)

const isArray = Array.isArray

const pathResolve = nodePath.resolve

const pathDirname = nodePath.dirname

// path string => cjs string
const pathToCode = pipe([
  fs.readFileSync,
  toString,
  replace(/\/\*\*[\s\S]+?\*\//g, ''),
  replace(/module.exports .+?\n/, ''),
])

// path string => codeBundle string
const pathToCodeBundle = pipe([
  all({
    path: identity,
    code: pathToCode,
  }),

  ({ path, code }) => {
    const alreadyRequiredPaths = new Set()
    const cwd = pathDirname(path)
    let result = code
    while (result.includes('require(')) {
      result = result.replace(/const \w+ = require\('(?<path>.+)'\)/g, (match, p1, offset, source, groups) => {
        const { path } = groups
        const requiredPath = pathResolve(cwd, `${path}.js`)
        if (alreadyRequiredPaths.has(requiredPath)) {
          return ''
        }
        alreadyRequiredPaths.add(requiredPath)
        let requiredCode = pathToCode(requiredPath)

        while (requiredCode.includes('require(')) {
          requiredCode = requiredCode.replace(
            /const \w+ = require\('(?<path>.+)'\)/,
            pipe([
              (match, p1, offset, source, groups) => groups.path,
              path => `${path}.js`,
              curry.arity(2, pathResolve, pathDirname(requiredPath), __),
              switchCase([
                requiredPath => alreadyRequiredPaths.has(requiredPath),
                always(''),
                pipe([
                  tap(requiredPath => alreadyRequiredPaths.add(requiredPath)),
                  all({
                    requiredPath: identity,
                    code: pathToCode,
                  }),
                  ({ requiredPath, code }) => {
                    code = code.replace(
                      /const (?<moduleName>\w+) = require\('(?<path>.+)'\)/g,
                      (match, p1, p2, offset, source, groups) => {
                        const { moduleName, path } = groups
                        const newPath = pathResolve(pathDirname(requiredPath), path)
                        const newStatement = `const ${moduleName} = require('${newPath}')`
                        return newStatement
                      }
                    )
                    return code
                  },
                ]),
              ]),
            ]))
        }
        return requiredCode
      })
      result = result.replace(/\n{2,}/g, '\n\n')
    }
    return result
  },
])

const ignoredNames = new Set([
  'is',
  'heapUsedInLoop',
  'timeInLoop',
  'tracef',
])

// name string => boolean
const nameIsIgnored = name => ignoredNames.has(name)

const distributor = pipe([
  tap(tryCatch(
    thunkify(fs.promises.rm, `${__dirname}/dist`, { recursive: true }),
    noop)),
  tap(thunkify(fs.promises.mkdir, `${__dirname}/dist/x`, { recursive: true })),
  transform(
    compose([
      Transducer.filter(pipe([
        get('name'),
        not(nameIsIgnored),
      ])),

      Transducer.map(assign({
        baseCodeBundle: pipe([
          get('path'),
          pathToCodeBundle,
        ]),
      })),

      Transducer.map(switchCase([
        or([
          ({ distPath }) => distPath.endsWith('rubico.mjs'),
          ({ distPath }) => distPath.endsWith('rubico.es.js'),
        ]),
        assign({
          codeBundle: ({ name, baseCodeBundle }) => `
/**
 * rubico v${rubicoVersion}
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2023 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */
${baseCodeBundle}export {
  pipe, tap,
  switchCase, tryCatch,
  all, assign, get, set, pick, omit,
  map, filter, reduce, transform, flatMap,
  and, or, not, some, every,
  eq, gt, lt, gte, lte,
  thunkify, always,
  curry, __,
}

export default ${name}
`.trimStart(),
        }),

        or([
          ({ distPath }) => distPath.endsWith('rubico.min.mjs'),
          ({ distPath }) => distPath.endsWith('rubico.es.min.js'),
        ]),
        assign({
          codeBundle: async ({ name, baseCodeBundle }) => `
/**
 * rubico v${rubicoVersion}
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2023 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */
${(await minify(`${baseCodeBundle}export {
  pipe, tap,
  switchCase, tryCatch,
  all, assign, get, set, pick, omit,
  map, filter, reduce, transform, flatMap,
  and, or, not, some, every,
  eq, gt, lt, gte, lte,
  thunkify, always,
  curry, __,
}

export default ${name}`)).code}
`.trimStart(),
        }),

        eq('esm', get('type')),
        assign({
          codeBundle: ({ name, baseCodeBundle }) => `
/**
 * rubico v${rubicoVersion}
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2023 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */
${baseCodeBundle}export default ${name}
`.trimStart(),
        }),

        eq('esm-minified', get('type')),
        assign({
          codeBundle: async ({ name, baseCodeBundle }) => `
/**
 * rubico v${rubicoVersion}
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2023 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */
${(await minify(`${baseCodeBundle}export default ${name}`)).code}
`.trimStart(),
        }),

        eq('cjs', get('type')),
        assign({
          codeBundle: ({ name, baseCodeBundle }) => `
/**
 * rubico v${rubicoVersion}
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2023 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */

(function (root, ${name}) {
  if (typeof module == 'object') (module.exports = ${name}) // CommonJS
  else if (typeof define == 'function') define(() => ${name}) // AMD
  else (root.${name} = ${name}) // Browser
}(typeof globalThis == 'object' ? globalThis : this, (function () { 'use strict'
${baseCodeBundle}return ${name}
}())))
`.trimStart(),
        }),

        eq('cjs-minified', get('type')),
        assign({
          codeBundle: async ({ name, baseCodeBundle }) => `
/**
 * rubico v${rubicoVersion}
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2023 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */

${(await minify(`(function (root, ${name}) {
  if (typeof module == 'object') (module.exports = ${name}) // CommonJS
  else if (typeof define == 'function') define(() => ${name}) // AMD
  else (root.${name} = ${name}) // Browser
}(typeof globalThis == 'object' ? globalThis : this, (function () { 'use strict'
${baseCodeBundle}return ${name}
}())))`)).code}
`.trimStart(),
        }),
        function throwingUnrecognizedTypeError({ name, type }) {
          throw new TypeError(`${name} - unrecognized type ${type}`)
        }
      ])),

      Transducer.map(tap(pipe([
        get('distPath'),
        replace(process.env.HOME, '~'),
        curry.arity(2, console.log, 'writing', __),
      ]))),
    ]),
    {
      async concat({ distPath, codeBundle }) {
        await fs.promises.writeFile(distPath, codeBundle)
        return this
      },
    },
    // Stdout,
    null,
  ),
])

distributor([
  Object.keys(rubico).map(pipe([
    all({
      name: identity,
      path: pipe([
        name => `${name}.js`,
        curry.arity(2, pathResolve, __dirname, __),
      ]),
    }),
  ]))
  .flatMap(all([
    assign({
      type: always('esm'),
      distPath: pipe([
        get('name'),
        name => `${name}.es.js`,
        curry.arity(3, pathResolve, __dirname, 'dist', __),
      ]),
    }),
    assign({
      type: always('esm-minified'),
      distPath: pipe([
        get('name'),
        name => `${name}.es.min.js`,
        curry.arity(3, pathResolve, __dirname, 'dist', __),
      ]),
    }),

    assign({
      type: always('esm'),
      distPath: pipe([
        get('name'),
        name => `${name}.mjs`,
        curry.arity(3, pathResolve, __dirname, 'dist', __),
      ]),
    }),
    assign({
      type: always('esm-minified'),
      distPath: pipe([
        get('name'),
        name => `${name}.min.mjs`,
        curry.arity(3, pathResolve, __dirname, 'dist', __),
      ]),
    }),

    assign({
      type: always('cjs'),
      distPath: pipe([
        get('name'),
        name => `${name}.js`,
        curry.arity(3, pathResolve, __dirname, 'dist', __),
      ]),
    }),
    assign({
      type: always('cjs-minified'),
      distPath: pipe([
        get('name'),
        name => `${name}.min.js`,
        curry.arity(3, pathResolve, __dirname, 'dist', __),
      ]),
    }),
  ])),

  Object.keys(rubicoX).map(pipe([
    all({
      name: identity,
      path: pipe([
        name => `${name}.js`,
        curry.arity(3, pathResolve, __dirname, 'x', __),
      ]),
    }),
  ]))
  .flatMap(all([
    assign({
      type: always('esm'),
      distPath: pipe([
        get('name'),
        name => `${name}.es.js`,
        curry.arity(3, pathResolve, __dirname, 'dist/x', __),
      ]),
    }),
    assign({
      type: always('esm-minified'),
      distPath: pipe([
        get('name'),
        name => `${name}.es.min.js`,
        curry.arity(3, pathResolve, __dirname, 'dist/x', __),
      ]),
    }),

    assign({
      type: always('esm'),
      distPath: pipe([
        get('name'),
        name => `${name}.mjs`,
        curry.arity(3, pathResolve, __dirname, 'dist/x', __),
      ]),
    }),
    assign({
      type: always('esm-minified'),
      distPath: pipe([
        get('name'),
        name => `${name}.min.mjs`,
        curry.arity(3, pathResolve, __dirname, 'dist/x', __),
      ]),
    }),

    assign({
      type: always('cjs'),
      distPath: pipe([
        get('name'),
        name => `${name}.js`,
        curry.arity(3, pathResolve, __dirname, 'dist/x', __),
      ]),
    }),
    assign({
      type: always('cjs-minified'),
      distPath: pipe([
        get('name'),
        name => `${name}.min.js`,
        curry.arity(3, pathResolve, __dirname, 'dist/x', __),
      ]),
    }),
  ])),

  [
    {
      name: 'rubico',
      type: 'esm',
      path: pathResolve(__dirname, 'rubico.js'),
      distPath: pathResolve(__dirname, 'es.js'),
    },
    {
      name: 'rubico',
      type: 'cjs',
      path: pathResolve(__dirname, 'rubico.js'),
      distPath: pathResolve(__dirname, 'index.js'),
    },
    {
      name: 'rubico',
      type: 'esm',
      path: pathResolve(__dirname, 'rubico.js'),
      distPath: pathResolve(__dirname, 'dist', 'rubico.es.js'),
    },
    {
      name: 'rubico',
      type: 'esm-minified',
      path: pathResolve(__dirname, 'rubico.js'),
      distPath: pathResolve(__dirname, 'dist', 'rubico.es.min.js'),
    },
    {
      name: 'rubico',
      type: 'esm',
      path: pathResolve(__dirname, 'rubico.js'),
      distPath: pathResolve(__dirname, 'dist', 'rubico.mjs'),
    },
    {
      name: 'rubico',
      type: 'esm-minified',
      path: pathResolve(__dirname, 'rubico.js'),
      distPath: pathResolve(__dirname, 'dist', 'rubico.min.mjs'),
    },
    {
      name: 'rubico',
      type: 'cjs',
      path: pathResolve(__dirname, 'rubico.js'),
      distPath: pathResolve(__dirname, 'dist', 'rubico.js'),
    },
    {
      name: 'rubico',
      type: 'cjs-minified',
      path: pathResolve(__dirname, 'rubico.js'),
      distPath: pathResolve(__dirname, 'dist', 'rubico.min.js'),
    },
  ],

  /* TODO fix name conflicts
  [
    {
      name: 'rubicoX',
      type: 'esm',
      path: pathResolve(__dirname, 'x', 'index.js'),
      distPath: pathResolve(__dirname, 'dist', 'rubico-x.es.js'),
    },
    {
      name: 'rubicoX',
      type: 'cjs',
      path: pathResolve(__dirname, 'x', 'index.js'),
      distPath: pathResolve(__dirname, 'dist', 'rubico-x.js'),
    },
    {
      name: 'rubicoX',
      type: 'esm-minified',
      path: pathResolve(__dirname, 'x', 'index.js'),
      distPath: pathResolve(__dirname, 'dist', 'rubico-x.es.min.js'),
    },
    {
      name: 'rubicoX',
      type: 'cjs-minified',
      path: pathResolve(__dirname, 'x', 'index.js'),
      distPath: pathResolve(__dirname, 'dist', 'rubico-x.min.js'),
    },
  ],
  */
].flat(1))
