/**
 * rubico v2.3.3
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2024 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */

!function(n,t){"object"==typeof module?module.exports=t:"function"==typeof define?define((()=>t)):n.forEach=t}("object"==typeof globalThis?globalThis:this,function(){"use strict";const n=n=>null!=n&&"function"==typeof n.then,t=Symbol.for("placeholder"),o=function(n,o,e){return o==t?((n,t)=>function(o){return n(o,t)})(n,e):((n,t)=>function(o){return n(t,o)})(n,o)},e=Array.isArray,r=(Object.prototype.toString,Promise.all.bind(Promise)),c=n=>function(){return n},u=Symbol.iterator,f=Symbol.asyncIterator,i=function(t,o){return e(t)?function(t,o){const e=t.length,u=[];let f=-1;for(;++f<e;){const e=o(t[f]);n(e)&&u.push(e)}return 0==u.length?t:r(u).then(c(t))}(t,o):null==t?t:"function"==typeof t.forEach?t.forEach(o):"function"==typeof t[u]?function(t,o){const e=[];for(const r of t){const t=o(r);n(t)&&e.push(t)}return 0==e.length?t:r(e).then(c(t))}(t[u](),o):"function"==typeof t[f]?async function(t,o){const e=[];for await(const r of t){const t=o(r);n(t)&&e.push(t)}return 0==e.length?t:r(e).then(c(t))}(t[f](),o):t.constructor==Object?function(t,o){const e=[];for(const r in t){const c=o(t[r]);n(c)&&e.push(c)}return 0==e.length?t:r(e).then(c(t))}(t,o):t};return function(...e){const r=e.pop();if(0==e.length)return o(i,t,r);const c=e[0];return n(c)?c.then(o(i,t,r)):i(c,r)}}());
