#!/usr/bin/env node

require('rubico/global')
const http = require('http')

/**
 * @name runserver
 *
 * @synopsis
 * ```coffeescript [specscript]
 * module http
 *
 * runserver(options? {
 *   port?: number,
 * }) -> { server http.Server }
 * ```
 */
function runserver(options = {}) {
  const { port = 8080 } = options

  const userDb = new Map()

  const userTable = {
    async put(userRecord) {
      return userDb.set(userRecord.id, userRecord)
    },
    async getById(userId) {
      return userDb.get(userId)
    },
  }

  function healthCheckHandler(request, response) {
    response.writeHead(200, {
      'Content-Type': 'text/plain',
    })
    response.end('ok')
  }

  function optionsHandler(request, response) {
    response.writeHead(204, {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': '*',
      'Access-Control-Allow-Headers': '*',
      'Access-Control-Max-Age': '86400',
    })
    response.end()
  }

  // GET /user/:userId
  // retrieves a user resource
  async function getUserHandler(request, response) {
    const userId = request.url.match(/\d+/)[0]

    // validate
    if (isNaN(Number(userId))) {
      const error = new Error('Bad Request')
      error.code = 400
      throw error
    }

    // userTable is a theoretical client for a database
    const user = await userTable.getById(userId)

    // handle not found
    if (user == null) {
      const error = new Error('Not Found')
      error.code = 404
      throw error
    }

    // ensure no private user information is exposed
    const publicUser = {
      id: user.id,
      name: user.name,
      birthdate: user.birthdate,
      profilePictureUrl: user.profilePictureUrl,
      createTime: user.createTime,
    }

    // send back the user resource in the response body
    response.writeHead(200, {
      'Access-Control-Allow-Origin': '*',
      'Content-Type': 'application/json',
    })
    response.end(JSON.stringify({
      user: publicUser,
    }))
  }

  // PUT /user/:userId
  // creates or updates a user resource
  async function putUserHandler(request, response) {
    const userId = request.url.match(/\d+/)[0]

    const requestBodyBuffer = await new Promise(resolve => {
      const binaryArray = []
      request.on('data', chunk => {
        binaryArray.push(chunk)
      })
      request.on('end', () => {
        resolve(Buffer.concat(binaryArray))
      })
    })
    const requestBodyString = requestBodyBuffer.toString('utf8')
    const requestBodyJSON = JSON.parse(requestBodyString)

    // validate
    if (isNaN(Number(userId))) {
      const error = new Error('Bad Request')
      error.code = 400
      throw error
    }
    if (typeof requestBodyJSON.id != 'string') {
      const error = new Error('Bad Request')
      error.code = 400
      throw error
    }
    if (typeof requestBodyJSON.name != 'string') {
      const error = new Error('Bad Request')
      error.code = 400
      throw error
    }
    if (typeof requestBodyJSON.birthdate != 'string') {
      const error = new Error('Bad Request')
      error.code = 400
      throw error
    }
    if (typeof requestBodyJSON.profilePictureUrl != 'string') {
      const error = new Error('Bad Request')
      error.code = 400
      throw error
    }

    const user = {
      id: requestBodyJSON.id,
      name: requestBodyJSON.name,
      birthdate: requestBodyJSON.birthdate,
      profilePictureUrl: requestBodyJSON.profilePictureUrl,
      createTime: Date.now(),
    }

    // save user record to the db
    await userTable.put(user)

    // send back a successful response
    response.writeHead(200, {
      'Access-Control-Allow-Origin': '*',
      'Content-Type': 'application/json',
    })
    response.end(JSON.stringify({
      message: 'success',
    }))
  }

  function notFoundHandler(request, response) {
    response.writeHead(404, {
      'Content-Type': 'text/plain',
    })
    response.end('Not Found')
  }

  function errorHandler(error, request, response) {
    console.error(error)
    if (typeof error.code != 'number') {
      error.code = 500
    }
    response.writeHead(error.code, {
      'Access-Control-Allow-Origin': '*',
      'Content-Type': 'text/plain',
    })
    response.end(error.message)
  }

  const combinedHandler = tryCatch(
    switchCase([
      request => request.url.startsWith('/health'),
      healthCheckHandler,

      request => request.method == 'OPTIONS',
      optionsHandler,

      request => request.method == 'GET' && /^\/user\/\d+$/.test(request.url),
      getUserHandler,

      request => request.method == 'PUT' && /^\/user\/\d+$/.test(request.url),
      putUserHandler,

      notFoundHandler,
    ]),

    errorHandler
  )

  const server = http.createServer(combinedHandler)

  server.listen(port)

  return { server }
}

module.exports = runserver
